# Copyright 2024 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  GHA_Mode:
    type: string
    default: ""
  GHA_Platform:
    type: string
    default: ""
  GHA_Version:
    type: string
    default: ""

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  cm_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: secretflow/trustflow-dev-ubuntu22.04:latest
    resource_class: 2xlarge+
    shell: /bin/bash --login -eo pipefail
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "build and test"
          command: |
            set -ex
            ./script/install_attestation_lib.sh -p sim
            export PATH="/root/.cargo/bin:$PATH"
            export PATH="/root/.local/bin:$PATH"
            cargo build
            cargo test

  cm_docker_image_publish:
    docker:
      - image: cimg/deploy:2023.06.1
    resource_class: 2xlarge+
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Dev Docker image
          command: |
            PLATFORM=<< pipeline.parameters.GHA_Platform >>
            COMMON_VERSION=<< pipeline.parameters.GHA_Version >>
            OCCLUM_VERSION=occlum0.30.1-<< pipeline.parameters.GHA_Version >>

            # login docker
            docker login -u secretflow -p ${DOCKER_DEPLOY_TOKEN}
            # login docker - aliyun
            docker login -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD} secretflow-registry.cn-hangzhou.cr.aliyuncs.com

            case "$PLATFORM" in
              sim)
                echo "build and publish in sim mode, version: ${COMMON_VERSION}"
                bash deployment/publish.sh -p sim -v ${COMMON_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                ;;
              sgx)
                echo "build and publish in sgx mode, version: ${OCCLUM_VERSION}"
                bash deployment/publish.sh -p sgx -v ${OCCLUM_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                ;;
              tdx)
                echo "build and publish in tdx mode, version: ${COMMON_VERSION}"
                bash deployment/publish.sh -p tdx -v ${COMMON_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                ;;
              csv)
                echo "build and publish in csv mode, version: ${COMMON_VERSION}"
                bash deployment/publish.sh -p csv -v ${COMMON_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                ;;
              all)
                echo "build and publish all mode images, common version: ${COMMON_VERSION}, occlum version: ${OCCLUM_VERSION}"
                bash deployment/publish.sh -p sim -v ${COMMON_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                bash deployment/publish.sh -p sgx -v ${OCCLUM_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                bash deployment/publish.sh -p tdx -v ${COMMON_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                bash deployment/publish.sh -p csv -v ${COMMON_VERSION} -l -u -e secretflow:secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow
                ;;
              *)
                echo "Platform err, should be one of sim/sgx/tdx/csv/all, but got $PLATFORM"
                exit 1
                ;;
            esac
  
  cm_sdk_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: secretflow/trustflow-dev-ubuntu22.04:latest
    resource_class: large
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - run:
          name: "unit test"
          command: |
            source /root/miniconda3/etc/profile.d/conda.sh
            conda create -n test python=3.10.14 -y
            conda activate test
            cd capsule-manager-sdk/python
            export PYTHONPATH=.:$PYTHONPATH
            pip install -r dev-requirements.txt
            mkdir test-results
            pytest --junitxml=test-results/junit-report.xml
      - store_test_results:
          path: capsule-manager-sdk/python/test-results
  
  cm_sdk_publish:
    docker:
      - image: secretflow/trustflow-dev-ubuntu22.04:latest
    resource_class: large
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - run:
          name: "build package and publish"
          command: |
            source /root/miniconda3/etc/profile.d/conda.sh
            conda create -n build python=3.10.14 -y
            conda activate build
            python3 -m pip install twine auditwheel patchelf
            cd capsule-manager-sdk/python
            python3 setup.py bdist_wheel && twine check dist/*
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ut-workflow:
    when:
      not: << pipeline.parameters.GHA_Action >>
    jobs:
      - cm_ut
      - cm_sdk_ut
  cm-docker-image-publish-workflow:
    when:
      and:
        - equal: ["cm_docker_image_publish", << pipeline.parameters.GHA_Action >>]
        - exits: << pipeline.parameters.GHA_Platform >>
        - exits: << pipeline.parameters.GHA_Version >>
    jobs:
      - cm_docker_image_publish
  cm-sdk-publish-workflow:
    when:
      equal: ["cm_sdk_publish", << pipeline.parameters.GHA_Action >>]
    jobs:
      - cm_sdk_publish